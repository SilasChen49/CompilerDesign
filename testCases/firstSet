(=[(]
)=[)]
*=[*]
+=[+]
,=[,]
-=[-]
.=[.]
/=[/]
:=[:]
::=[::]
;=[;]
<=[<]
<==[<=]
<>=[<>]
==[=]
===[==]
>=[>]
>==[>=]
EPSILON=[EPSILON]
[=[[]
]=[]]
aParams=[not, floatNum, intNum, (, id, +, -, EPSILON]
aParams1r=[,, EPSILON]
aParamsTail=[,]
addOp=[or, +, -]
and=[and]
arithExpr=[not, floatNum, intNum, (, id, +, -]
arithExpr1p=[or, +, -, EPSILON]
arraySize=[[]
assignOp=[=]
assignStat=[id]
class=[class]
classBody=[id, float, int, EPSILON]
classBody1p=[(, ;, []
classDecl=[class]
classDecl1o=[:, EPSILON]
classDecl1r=[,, EPSILON]
classDecl2r=[id, float, int, EPSILON]
else=[else]
expr=[not, floatNum, intNum, (, id, +, -]
fParams=[id, float, int, EPSILON]
fParams1r=[[, EPSILON]
fParams2r=[,, EPSILON]
fParamsTail=[,]
fParamsTail1r=[[, EPSILON]
factor=[not, floatNum, intNum, (, id, +, -]
factor1p=[., EPSILON]
float=[float]
floatNum=[floatNum]
for=[for]
funcBody=[{]
funcBody1p=[get, for, id, float, if, put, return, int, EPSILON]
funcBody1p1p=[id]
funcBody1p1r=[get, for, id, if, put, return, EPSILON]
funcBody1p2p=[(, id, [, =, .]
funcDecl=[id, float, int]
funcDef=[id, float, int]
funcHead=[id, float, int]
funcHead1p=[::, EPSILON]
functionCall=[id]
functionCall1p=[(, [, ., EPSILON]
functionCall1p1p=[., EPSILON]
functionCall2r=[[, EPSILON]
get=[get]
id=[id]
idnest=[id]
idnest1p=[(, [, .]
idnest1r=[[, EPSILON]
if=[if]
indice=[[]
int=[int]
intNum=[intNum]
leftStat=[get, for, if, put, return]
leftType=[float, int]
multOp=[and, *, /]
not=[not]
or=[or]
preIdnest=[id]
preIdnest1p=[(, [, EPSILON]
prog=[program, id, float, class, int]
prog1r=[class, EPSILON]
prog2r=[id, float, int, EPSILON]
program=[program]
put=[put]
relExpr=[not, floatNum, intNum, (, id, +, -]
relExpr1p=[==, <=, <>, <, >, >=, EPSILON]
relOp=[==, <=, <>, <, >, >=]
return=[return]
sign=[+, -]
statBlock=[get, for, {, id, if, put, return, EPSILON]
statBlock1r=[get, for, id, if, put, return, EPSILON]
statement=[get, for, id, if, put, return]
term=[not, floatNum, intNum, (, id, +, -]
term1p=[and, *, /, EPSILON]
then=[then]
type=[id, float, int]
varDecl=[id, float, int]
varDecl1r=[[, EPSILON]
variable=[id]
variable1p=[(, [, ., EPSILON]
variable1p1p=[., EPSILON]
variable2r=[[, EPSILON]
{=[{]
}=[}]