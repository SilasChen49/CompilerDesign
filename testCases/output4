prog -> prog1r prog2r program funcBody ; 
prog1r -> classDecl prog1r 
classDecl -> class id classDecl1o { classBody } ; 
classDecl1o -> : id classDecl1r 
classDecl1r -> EPSILON 
classBody -> type id classBody1p 
type -> int 
classBody1p -> varDecl1r ; classBody 
varDecl1r -> arraySize varDecl1r 
arraySize -> [ intNum ] 
varDecl1r -> arraySize varDecl1r 
arraySize -> [ intNum ] 
varDecl1r -> arraySize varDecl1r 
arraySize -> [ intNum ] 
varDecl1r -> arraySize varDecl1r 
arraySize -> [ intNum ] 
varDecl1r -> arraySize varDecl1r 
arraySize -> [ intNum ] 
varDecl1r -> arraySize varDecl1r 
arraySize -> [ intNum ] 
varDecl1r -> EPSILON 
classBody -> type id classBody1p 
type -> float 
classBody1p -> varDecl1r ; classBody 
varDecl1r -> EPSILON 
classBody -> type id classBody1p 
type -> int 
classBody1p -> ( fParams ) ; classDecl2r 
fParams -> type id fParams1r fParams2r 
type -> int 
fParams1r -> arraySize fParams1r 
arraySize -> [ intNum ] 
fParams1r -> EPSILON 
fParams2r -> EPSILON 
classDecl2r -> funcDecl classDecl2r 
funcDecl -> type id ( fParams ) ; 
type -> int 
fParams -> type id fParams1r fParams2r 
type -> int 
fParams1r -> arraySize fParams1r 
arraySize -> [ intNum ] 
fParams1r -> EPSILON 
fParams2r -> fParamsTail fParams2r 
fParamsTail -> , type id fParams1r 
type -> int 
fParams1r -> EPSILON 
fParams2r -> EPSILON 
classDecl2r -> EPSILON 
prog1r -> EPSILON 
prog2r -> funcDef prog2r 
funcDef -> funcHead funcBody ; 
funcHead -> type id funcHead1p ( fParams ) 
type -> int 
funcHead1p -> :: id 
fParams -> EPSILON 
funcBody -> { funcBody1p } 
funcBody1p -> leftType funcBody1p1p 
leftType -> float 
funcBody1p1p -> id varDecl1r ; funcBody1p 
varDecl1r -> EPSILON 
funcBody1p -> leftType funcBody1p1p 
leftType -> int 
funcBody1p1p -> id varDecl1r ; funcBody1p 
varDecl1r -> EPSILON 
funcBody1p -> id funcBody1p2p 
funcBody1p2p -> variable1p assignOp expr ; funcBody1p1r 
variable1p -> idnest1r variable1p1p 
idnest1r -> EPSILON 
variable1p1p -> EPSILON 
assignOp -> = 
expr -> arithExpr relExpr1p 
arithExpr -> term arithExpr1p 
term -> factor term1p 
factor -> intNum 
term1p -> multOp factor term1p 
multOp -> * 
factor -> intNum 
term1p -> EPSILON 
arithExpr1p -> addOp term arithExpr1p 
addOp -> - 
term -> factor term1p 
factor -> intNum 
term1p -> EPSILON 
arithExpr1p -> addOp term arithExpr1p 
addOp -> + 
term -> factor term1p 
factor -> intNum 
term1p -> multOp factor term1p 
multOp -> / 
factor -> intNum 
term1p -> multOp factor term1p 
multOp -> and 
factor -> floatNum 
term1p -> EPSILON 
arithExpr1p -> EPSILON 
relExpr1p -> relOp arithExpr 
relOp -> > 
arithExpr -> term arithExpr1p 
term -> factor term1p 
factor -> floatNum 
term1p -> EPSILON 
arithExpr1p -> EPSILON 
funcBody1p1r -> EPSILON 
prog2r -> EPSILON 
funcBody -> { funcBody1p } 
funcBody1p -> leftType funcBody1p1p 
leftType -> int 
funcBody1p1p -> id varDecl1r ; funcBody1p 
varDecl1r -> arraySize varDecl1r 
arraySize -> [ intNum ] 
varDecl1r -> EPSILON 
funcBody1p -> leftType funcBody1p1p 
leftType -> int 
funcBody1p1p -> id varDecl1r ; funcBody1p 
varDecl1r -> EPSILON 
funcBody1p -> id funcBody1p2p 
funcBody1p2p -> funcBody1p1p 
funcBody1p1p -> id varDecl1r ; funcBody1p 
varDecl1r -> EPSILON 
funcBody1p -> leftStat funcBody1p1r 
leftStat -> for ( type id assignOp expr ; relExpr ; assignStat ) statBlock ; 
type -> int 
assignOp -> = 
expr -> arithExpr relExpr1p 
arithExpr -> term arithExpr1p 
term -> factor term1p 
factor -> intNum 
term1p -> EPSILON 
arithExpr1p -> EPSILON 
relExpr1p -> EPSILON 
relExpr -> arithExpr relOp arithExpr 
arithExpr -> term arithExpr1p 
term -> factor term1p 
factor -> preIdnest factor1p 
preIdnest -> id preIdnest1p 
preIdnest1p -> idnest1r 
idnest1r -> EPSILON 
factor1p -> EPSILON 
term1p -> EPSILON 
arithExpr1p -> EPSILON 
relOp -> <= 
arithExpr -> term arithExpr1p 
term -> factor term1p 
factor -> intNum 
term1p -> EPSILON 
arithExpr1p -> EPSILON 
assignStat -> variable assignOp expr 
variable -> id variable1p 
variable1p -> idnest1r variable1p1p 
idnest1r -> EPSILON 
variable1p1p -> EPSILON 
assignOp -> = 
expr -> arithExpr relExpr1p 
arithExpr -> term arithExpr1p 
term -> factor term1p 
factor -> preIdnest factor1p 
preIdnest -> id preIdnest1p 
preIdnest1p -> idnest1r 
idnest1r -> EPSILON 
factor1p -> EPSILON 
term1p -> EPSILON 
arithExpr1p -> addOp term arithExpr1p 
addOp -> + 
term -> factor term1p 
factor -> intNum 
term1p -> EPSILON 
arithExpr1p -> EPSILON 
relExpr1p -> EPSILON 
statBlock -> { statBlock1r } 
statBlock1r -> statement statBlock1r 
statement -> get ( variable ) ; 
variable -> id variable1p 
variable1p -> idnest1r variable1p1p 
idnest1r -> EPSILON 
variable1p1p -> EPSILON 
statBlock1r -> EPSILON 
funcBody1p1r -> EPSILON 
